name: Upload BETA firmware (multi-variant)

on:
  push:
    branches: [ master ]             # ← změň na 'main' pokud používáš main
    paths:
      - 'release-assets/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'SemVer verze (např. 1.2.3) — při ručním spuštění'
        required: true

jobs:
  beta:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 1) Zjisti verzi a model z názvů *.bin nebo z workflow_dispatch inputu
      #    OČEKÁVANÉ JMÉNO SOUBORU V DRAFTU: <MODEL>-P..B..-vX.Y.Z-beta.bin
      - name: Detect version & model (requires -beta in filenames)
        id: detect
        shell: bash
        run: |
          set -e
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi

          test -d release-assets || { echo "::error::Missing release-assets/"; exit 1; }
          shopt -s nullglob
          FILES=(release-assets/*.bin)
          (( ${#FILES[@]} > 0 )) || { echo "::error::No .bin files in release-assets/"; exit 1; }

          # vezmeme první soubor a vytáhneme MODEL a VERSION (s -beta v názvu)
          FIRST="${FILES[0]}"
          BASENAME="$(basename "$FIRST")"

          # Očekávaný tvar: <MODEL>-PxxByy-vA.B.C-beta.bin
          if [[ "$BASENAME" =~ ^([A-Z0-9]+)-P(6|8|10|15)B(1|2)-v([0-9]+\.[0-9]+\.[0-9]+)-beta\.bin$ ]]; then
            MODEL="${BASH_REMATCH[1]}"
            DETECTED_VERSION="${BASH_REMATCH[4]}"
          else
            echo "::error::Filename does not match '*-P..B..-vX.Y.Z-beta.bin': $BASENAME"
            exit 1
          fi

          # Pokud verze nebyla zadána ručně, použij detekovanou
          if [ -z "${VERSION:-}" ]; then
            VERSION="$DETECTED_VERSION"
          fi

          # Ověř, že všechny .bin mají -v${VERSION}-beta.bin a stejný MODEL prefix
          FAIL=0
          for f in "${FILES[@]}"; do
            BN="$(basename "$f")"
            [[ "$BN" =~ ^([A-Z0-9]+)-P(6|8|10|15)B(1|2)-v${VERSION}-beta\.bin$ ]] || { echo "::error::Wrong version/suffix in $BN (expected -v${VERSION}-beta.bin)"; FAIL=1; }
          done
          [ $FAIL -eq 0 ] || exit 1

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "model=$MODEL"   >> "$GITHUB_OUTPUT"
          echo "Detected MODEL=$MODEL, VERSION=$VERSION"

      # 2) Validace povinných mutací a přesného tvaru názvu (s -beta)
      - name: Validate required variants & filenames (-beta enforced)
        shell: bash
        run: |
          set -e
          VERSION='${{ steps.detect.outputs.version }}'
          MODEL='${{ steps.detect.outputs.model }}'
          ls -la release-assets

          # UPRAV dle potřeby (pokud některé mutace nevydáváš)
          REQUIRED="P15B1 P10B1 P8B1 P6B1 P15B2 P8B2 P6B2"

          FAIL=0
          for MUT in $REQUIRED; do
            FILE="${MODEL}-${MUT}-v${VERSION}-beta.bin"
            if [ ! -f "release-assets/$FILE" ]; then
              echo "::error::Missing expected asset: $FILE"
              FAIL=1
            fi
            echo "$FILE" | grep -Eq "^${MODEL}-P(6|8|10|15)B(1|2)-v${VERSION}-beta\.bin$" || { echo "::error::Filename invalid: $FILE"; FAIL=1; }
          done
          [ $FAIL -eq 0 ] || exit 1

      # 3) SHA-256 pro všechny -beta .bin (vždy přepíše/obnoví)
      - name: Generate SHA-256
        run: |
          cd release-assets
          shopt -s nullglob
          for f in *-beta.bin; do
            sha256sum "$f" | awk '{print $1 "  " FILENAME}' FILENAME="$f" > "$f.sha256"
          done

      # 4) Pokud existuje draft pro tuto verzi, smaž shodné assety, ať jde upload opakovat
      - name: Clean existing assets in existing draft (if any)
        shell: bash
        run: |
          set -e
          VERSION='${{ steps.detect.outputs.version }}'
          MODEL='${{ steps.detect.outputs.model }}'

          gh api repos/${GITHUB_REPOSITORY}/releases?per_page=100 > list.json
          RID=$(jq -r --arg ver "v${VERSION}" '
            .[] | select(.draft==true) |
            select(
              (.name == ("Firmware " + $ver + " BETA")) or
              (.tag_name == ($ver + "-beta"))
            ) | .id
          ' list.json | head -n1)

          if [ -n "$RID" ] && [ "$RID" != "null" ]; then
            echo "Found existing draft release id=$RID — cleaning matching assets"
            gh api repos/${GITHUB_REPOSITORY}/releases/$RID > rel.json
            for f in release-assets/*; do
              BASENAME=$(basename "$f")
              AID=$(jq -r --arg n "$BASENAME" '.assets[] | select(.name==$n) | .id' rel.json)
              if [ -n "$AID" ] && [ "$AID" != "null" ]; then
                echo "Deleting existing asset $BASENAME (id=$AID)"
                gh api -X DELETE repos/${GITHUB_REPOSITORY}/releases/assets/$AID >/dev/null
              fi
            done
          else
            echo "No existing draft found for v${VERSION} — will create a new one."
          fi

      # 5) Vytvoř / aktualizuj BETA release jako DRAFT a nahraj -beta soubory
      - name: Create or Update BETA release (as draft)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.detect.outputs.version }}-beta
          name: Firmware v${{ steps.detect.outputs.version }} BETA
          draft: true
          prerelease: false
          files: |
            release-assets/*-beta.bin
            release-assets/*-beta.bin.sha256
